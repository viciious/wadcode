#!/usr/bin/python3

#	Copyright (C) 2023 Victor Luchits
#
#	This file is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	This file is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.

import json
import sys
import mmap
import struct
from NamedStruct import NamedStruct
from io import BytesIO

class Texture1():
    def __init__(self, struct_extra = "<"):
        self.entries = []
        self.patches = []
        self.names = []

        self._MAP_PATCH = NamedStruct((
            ("h", "originx"),
            ("h", "originy"),
            ("h", "patch"),
            ("h", "stepdir"),
            ("h", "colormap"),
            ), struct_extra)

        self._TEXTURE1_ENTRY = NamedStruct((
            ("8s", "name"),
            ("l", "masked"),
            ("h", "width"),
            ("h", "height"),   
            ("l", "columndirectory"),
            ("h", "patchcount"),
        ), struct_extra)

    @classmethod
    def create_from_lump(cls, data):
        texture1 = cls("<")
        entrysize = texture1._TEXTURE1_ENTRY.size
        patchsize = texture1._MAP_PATCH.size
        numtextures = struct.unpack("<I", data[0:4])[0]

        for i in range(numtextures):
            offset = struct.unpack("<I", data[(4+i*4):(4+i*4)+4])[0]
            entry = texture1._TEXTURE1_ENTRY.unpack(data[offset:offset+entrysize])
            offset += entrysize

            for _ in range(entry.patchcount):
                patch = texture1._MAP_PATCH.unpack(data[offset:offset+patchsize])
                texture1.patches.append(patch)
                offset += patchsize

            texture1.entries.append(entry)
            texture1.names.append(entry[0])
            i = i + 1

        return texture1

    @classmethod
    def create_from_list(cls, arr):
        texture1 = cls("<")

        for entry in arr:
            texture1.names.append(entry["name"].encode("latin1"))

        for i, entry in enumerate(arr):
            d = {
                "name": texture1.names[i],
                "width": entry["width"],
                "height": entry["height"],
                "masked": 0,
                "columndirectory": 0,
                "patchcount": 0,
            }

            if "masked" in entry and entry["masked"]:
                d["masked"] = 1
            if "patches" in entry:
                d["patchcount"] = 0
                for p in entry["patches"]:
                    pel = {
                        "originx": 0,
                        "originy": 0,
                        "patch": -1,
                        "stepdir": 0,
                        "colormap": 0,
                    }

                    if "originx" in p: pel["originx"] = p["originx"]
                    if "originy" in p: pel["originy"] = p["originy"]
                    if "patch" in p: pel["patch"] = texture1.find_tex_by_name(p["patch"])
                    if "stepdir" in p: p["stepdir"] = pel["stepdir"]
                    if "colormap" in p: pel["colormap"] = p["colormap"]
                    texture1.patches.append(texture1._MAP_PATCH.unpack(texture1._MAP_PATCH.pack(pel)))
                    d["patchcount"] += 1

            texture1.entries.append(texture1._TEXTURE1_ENTRY.unpack(texture1._TEXTURE1_ENTRY.pack(d)))

        return texture1

    def find_tex_by_name(self, name):
        name = name.encode("latin1")
        for i, v in enumerate(self.names):
            if v == name:
                return i
        return -1

    def to_list(self):
        arr = []
        poffset = 0

        for entry in self.entries:
            el = {
                "name": entry.name.rstrip(b"\x00").decode("latin1"),
                "width": entry.width,
                "height": entry.height,
            }

            if entry.masked:
                el["masked"] = 1
            if entry.patchcount:
                el["patches"] = []

                for p in self.patches[poffset:poffset+entry.patchcount]:
                    pel = {
                        "originx": p.originx,
                        "originy": p.originy,
                        "stepdir": p.stepdir,
                        "colormap": p.colormap,
                    }

                    if pel["stepdir"] == 1:
                        del pel["stepdir"]

                    pel = {k: v for k, v in pel.items() if v}
                    pel["patch"] = self.names[p.patch].decode("latin1").rstrip('\0')

                    if entry.patchcount != 1 or pel["patch"] != el["name"]:
                        el["patches"].append(pel)

                if len(el["patches"]) == 0:
                    del el["patches"]

                poffset += entry.patchcount

            arr.append(el)

        return arr

    def to_lump(self):
        dir = BytesIO()
        b = BytesIO()

        dir.write(struct.pack("<I", len(self.entries)))
        offset = 4 + 4 * len(self.entries)

        poffset = 0
        for entry in self.entries:
            dir.write(struct.pack("<I", offset + b.tell()))

            b.write(self._TEXTURE1_ENTRY.pack({
                "name": entry.name,
                "width": entry.width,
                "height": entry.height,
                "masked": entry.masked,
                "columndirectory": entry.columndirectory,
                "patchcount": entry.patchcount,
            }))

            for p in self.patches[poffset:poffset+entry.patchcount]:
                b.write(self._MAP_PATCH.pack({
                    "originx": p.originx,
                    "originy": p.originy,
                    "patch": p.patch,
                    "stepdir": p.stepdir,
                    "colormap": p.colormap,
                }))
            poffset += entry.patchcount
        
        dir.write(b.getbuffer())
        return dir.getvalue()

filename1 = sys.argv[1]
filename2 = sys.argv[2]

if filename2.endswith(".json"):
    # lump to json
    with open(filename1, "rb") as fin:
        data = mmap.mmap(fin.fileno(), 0, access=mmap.ACCESS_COPY)
        tex1 = Texture1.create_from_lump(data)

        with open(filename2, "wt") as fout:
            json.dump(tex1.to_list(), fp = fout, indent = 4, sort_keys = True)
            fout.write("\n")

elif filename1.endswith(".json"):
    # json to lump
    with open(filename1, "rt") as fin:
        tex1 = Texture1.create_from_list(json.loads(fin.read()))

        with open(filename2, "wb") as fout:
            fout.write(tex1.to_lump())
